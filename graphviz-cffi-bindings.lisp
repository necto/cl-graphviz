;;; Generated by Verrazano 0.5
;;; WARNING: This is a generated file, editing it is unwise!


(cl:in-package :cl-user)

(cl:defpackage :graphviz-cffi-bindings
  (:use :cffi)
  (:nicknames)
  (:export "JUST"
           "YOFFSET-CENTERLINE"
           "YOFFSET-LAYOUT"
           "FREE-LAYOUT"
           "LAYOUT"
           "STR"
           "TEXTPARA-T"
           "POSTSCRIPT-ALIAS"
           "SVG-FONT-STYLE"
           "SVG-FONT-WEIGHT"
           "SVG-FONT-FAMILY"
           "XFIG-CODE"
           "STYLE"
           "STRETCH"
           "FAMILY"
           "-NEW"
           "-CONSTRUCTOR"
           "-OPERATOR-="
           "AGDICT-T-NEW"
           "AGDICT-T-CONSTRUCTOR"
           "AGDICT-T-OPERATOR-="
           "ELIST-NEW"
           "ELIST-CONSTRUCTOR"
           "ELIST-OPERATOR-="
           "SHAPE-FUNCTIONS-NEW"
           "SHAPE-FUNCTIONS-CONSTRUCTOR"
           "SHAPE-FUNCTIONS-OPERATOR-="
           ".-41-NEW"
           ".-41-CONSTRUCTOR"
           "BOX-OPERATOR-="
           "AGRAPHINFO-T-NEW"
           "AGRAPHINFO-T-CONSTRUCTOR"
           "AGRAPHINFO-T-OPERATOR-="
           "TEXTLABEL-T-NEW"
           "TEXTLABEL-T-CONSTRUCTOR"
           "TEXTLABEL-T-OPERATOR-="
           "INSIDE-T-NEW"
           "INSIDE-T-CONSTRUCTOR"
           "INSIDE-T-OPERATOR-="
           "NODEQUEUE-NEW"
           "NODEQUEUE-CONSTRUCTOR"
           "NODEQUEUE-OPERATOR-="
           "AGEDGE-T-NEW"
           "AGEDGE-T-CONSTRUCTOR"
           "AGEDGE-T-OPERATOR-="
           "AGNODE-T-NEW"
           "AGNODE-T-CONSTRUCTOR"
           "AGNODE-T-OPERATOR-="
           "SHAPE-DESC-NEW"
           "SHAPE-DESC-CONSTRUCTOR"
           "SHAPE-DESC-OPERATOR-="
           "BEZIERF-NEW"
           "BEZIERF-CONSTRUCTOR"
           "BEZIERF-OPERATOR-="
           "RANK-T-NEW"
           "RANK-T-CONSTRUCTOR"
           "RANK-T-OPERATOR-="
           "AGNODEINFO-T-NEW"
           "AGNODEINFO-T-CONSTRUCTOR"
           "AGNODEINFO-T-OPERATOR-="
           "SHAPE-T-NEW"
           "SHAPE-T-CONSTRUCTOR"
           "SHAPE-T-OPERATOR-="
           "POINTF-S-NEW"
           "POINTF-S-CONSTRUCTOR"
           "POINTF-S-OPERATOR-="
           "SPLINES-NEW"
           "SPLINES-CONSTRUCTOR"
           "SPLINES-OPERATOR-="
           "STROKE-T-NEW"
           "STROKE-T-CONSTRUCTOR"
           "STROKE-T-OPERATOR-="
           ".-46-NEW"
           ".-46-CONSTRUCTOR"
           "SPLINE-INFO-OPERATOR-="
           "BEZIER-NEW"
           "BEZIER-CONSTRUCTOR"
           "BEZIER-OPERATOR-="
           ".-57-NEW"
           ".-57-CONSTRUCTOR"
           "GVLAYOUT-FEATURES-T-OPERATOR-="
           "AGDATA-T-NEW"
           "AGDATA-T-CONSTRUCTOR"
           "AGDATA-T-OPERATOR-="
           "NLIST-T-NEW"
           "NLIST-T-CONSTRUCTOR"
           "NLIST-T-OPERATOR-="
           "AGPROTO-T-NEW"
           "AGPROTO-T-CONSTRUCTOR"
           "AGPROTO-T-OPERATOR-="
           "FIELD-T-NEW"
           "FIELD-T-CONSTRUCTOR"
           "FIELD-T-OPERATOR-="
           "SPLINESF-NEW"
           "SPLINESF-CONSTRUCTOR"
           "SPLINESF-OPERATOR-="
           "PATH-NEW"
           "PATH-CONSTRUCTOR"
           "PATH-OPERATOR-="
           "AGRAPH-T-NEW"
           "AGRAPH-T-CONSTRUCTOR"
           "AGRAPH-T-OPERATOR-="
           ".-56-NEW"
           ".-56-CONSTRUCTOR"
           "FDP-PARMS-T-OPERATOR-="
           "LAYOUT-T-NEW"
           "LAYOUT-T-CONSTRUCTOR"
           "LAYOUT-T-OPERATOR-="
           ".-40-NEW"
           ".-40-CONSTRUCTOR"
           "POINT-OPERATOR-="
           "ADJMATRIX-T-NEW"
           "ADJMATRIX-T-CONSTRUCTOR"
           "ADJMATRIX-T-OPERATOR-="
           "PATHEND-T-NEW"
           "PATHEND-T-CONSTRUCTOR"
           "PATHEND-T-OPERATOR-="
           ".-42-NEW"
           ".-42-CONSTRUCTOR"
           "BOXF-OPERATOR-="
           "PORT-NEW"
           "PORT-CONSTRUCTOR"
           "PORT-OPERATOR-="
           "AGEDGEINFO-T-NEW"
           "AGEDGEINFO-T-CONSTRUCTOR"
           "AGEDGEINFO-T-OPERATOR-="
           "POLYGON-T-NEW"
           "POLYGON-T-CONSTRUCTOR"
           "POLYGON-T-OPERATOR-="
           "AGSYM-T-NEW"
           "AGSYM-T-CONSTRUCTOR"
           "AGSYM-T-OPERATOR-="
           "GV-CONTEXT"
           "AGSUBG"
           "GV-NEXT-INPUT-GRAPH"
           "AGXGET"
           "AGSETERR"
           "AGREAD-USERGETS"
           "AGHTMLSTR"
           "AGFINDNODE"
           "QSORT-CMPF"
           "AGFSTNODE"
           "AGPROTOGRAPH"
           "GV-RENDER-FILENAME"
           "AGSTRDUP"
           "AGGET"
           "AGWRITE"
           "AGSET"
           "AGLSTNODE"
           "GV-LAYOUT-JOBS"
           "S"
           "A"
           "INSIDE-T"
           "AGNXTOUT"
           "LIMIT"
           "STORE"
           "NODEQUEUE"
           "AGCANONICAL"
           "GVC-VERSION"
           "GVC-BUILD-DATE"
           "AGNXTIN"
           "AGERRNO"
           "AGSTRCANON"
           "ATTRSYM-T"
           "AGFINDATTR"
           "BSEARCH-CMPF"
           "AGFINDEDGE"
           "AGEDGEATTR"
           "GV-FREE-CONTEXT"
           "AGERRORS"
           "AGSTRFREE"
           "AGDELETE"
           "AGLASTERR"
           "STROKES"
           "NSTROKES"
           "SHAPE-T"
           "NVERTICES"
           "STROKE-T"
           "GV-USERNAME"
           "AGNODEATTR"
           "AGPRVNODE"
           "GV-RENDER"
           "AGCONTAINS"
           "ATTACH-ATTRS"
           "GVC-INFO"
           "GETS-F"
           "AGSTRDUP-HTML"
           "GV-LAYOUT"
           "AGGRAPH"
           "AGNODE"
           "AGOBJKIND-T"
           "AGRAPHATTR"
           "SPLINE-MERGE"
           "SWAP-ENDS"
           "SPLINE-INFO"
           "HTMLLABEL-T"
           "AGINITLIB"
           "AGNNODES"
           "AGSETFILE"
           "AGUSERGRAPH"
           "AGSAFESET"
           "GVLAYOUT-FEATURES-T"
           "AGFSTOUT"
           "GV-FREE-LAYOUT"
           "AGNEDGES"
           "LR"
           "FLD"
           "LP"
           "N-FLDS"
           "B"
           "FIELD-T"
           "SPLINESF"
           "BEZIERF"
           "AGCOPYATTR"
           "AGEDGE"
           "AGINSERT"
           "AGFINDSUBG"
           "NBOX"
           "LRPP"
           "LLPP"
           "URPP"
           "ULPP"
           "END"
           "START"
           "SH-EPSF"
           "SH-POINT"
           "SH-RECORD"
           "SH-POLY"
           "SH-UNSET"
           "SHAPE-KIND"
           "AGCLOSE"
           "AGXSET"
           "AGWARNINGF"
           "AGNXTNODE"
           "GV-RENDER-DATA"
           "AGERRORF"
           "T-0"
           "K"
           "TFACT"
           "C"
           "UNSCALED"
           "NUM-ITERS"
           "USE-NEW"
           "USE-GRID"
           "FDP-PARMS-T"
           "AGPREV"
           "AGMAX"
           "AGERR"
           "AGWARN"
           "AGERRLEVEL-T"
           "GV-NE-WCONTEXT"
           "AGREAD"
           "FILE"
           "SIZE-T"
           "AGFSTEDGE"
           "AGOPEN"
           "BOXES"
           "BOXN"
           "SIDEMASK"
           "NP"
           "NB"
           "PATHEND-T"
           "GV-RENDER-JOBS"
           "AGREADLINE"
           "GV-PARSE-ARGS"
           "GV-TOGGLE"
           "AGINDEX"
           "AGMEMREAD"
           "GVC-USERNAME"
           "AGFSTIN"
           "AGNXTEDGE"
           "TAIL"
           "HEAD"
           "TO-VIRT"
           "MINLEN"
           "COUNT"
           "TREE-INDEX"
           "CUTVALUE"
           "WEIGHT"
           "XPENALTY"
           "CONC-OPP-FLAG"
           "PATH"
           "FACTOR"
           "TO-ORIG"
           "LABEL-ONTOP"
           "ADJACENT"
           "EDGE-TYPE"
           "TAIL-LABEL"
           "HEAD-LABEL"
           "HEAD-PORT"
           "TAIL-PORT"
           "SPL"
           "AGEDGEINFO-T"
           "PPOLYLINE-T"
           "PN"
           "PS"
           "PPOLY-T"
           "PPOINT-T"
           "SIDE"
           "CLIP"
           "CONSTRAINED"
           "DEFINED"
           "BP"
           "THETA"
           "PORT"
           "SPLINES"
           "EP"
           "SP"
           "EFLAG"
           "SFLAG"
           "BEZIER"
           "GRAPH"
           "PAD"
           "PRIORITY"
           "LIM"
           "LOW"
           "PAR"
           "TREE-OUT"
           "TREE-IN"
           "SAVE-OUT"
           "SAVE-IN"
           "MVAL"
           "ORDER"
           "OUTLEAF"
           "INLEAF"
           "UF-PARENT"
           "UF-SIZE"
           "OTHER"
           "FLAT-IN"
           "FLAT-OUT"
           "OUT"
           "IN"
           "NEXT"
           "WEIGHT-CLASS"
           "RANKTYPE"
           "ONSTACK"
           "MARK"
           "NODE-TYPE"
           "HAS-PORT"
           "POS"
           "HOPS"
           "HEAPINDEX"
           "ID"
           "YSIZE"
           "XSIZE"
           "PINNED"
           "CLUSTNODE"
           "STATE"
           "RW"
           "LW"
           "HT"
           "HEIGHT"
           "WIDTH"
           "COORD"
           "SHAPE-INFO"
           "SHAPE"
           "AGNODEINFO-T"
           "ELIST"
           "AGEDGE-T"
           "EDGE-T"
           "BOXF"
           "USERSHAPE"
           "POLYGON"
           "FNS"
           "SHAPE-DESC"
           "VERTICES"
           "OPTION"
           "SKEW"
           "DISTORTION"
           "ORIENTATION"
           "SIDES"
           "PERIPHERIES"
           "REGULAR"
           "POLYGON-T"
           "CODEFN"
           "PBOXFN"
           "INSIDEFN"
           "PORTFN"
           "FREEFN"
           "INITFN"
           "SHAPE-FUNCTIONS"
           "PROTO"
           "META-NODE"
           "ROOT"
           "OUTEDGES"
           "INEDGES"
           "NODES"
           "UNIV"
           "DIDSET"
           "ATTR"
           "EXACT-RANKSEP"
           "LABEL-POS"
           "SET-TYPE"
           "INSTALLED"
           "EXPANDED"
           "RANKLEADER"
           "LEADER"
           "RN"
           "LN"
           "RANKSEP"
           "NODESEP"
           "FONTNAMES"
           "CLUSTER-WAS-COLLAPSED"
           "SHOWBOXES"
           "HAS-FLAT-EDGES"
           "MAXRANK"
           "MINRANK"
           "N-NODES"
           "MAXSET"
           "MINSET"
           "COMP"
           "RANK"
           "NLIST"
           "CLUST"
           "N-CLUSTER"
           "NDIM"
           "T"
           "SUM-T"
           "SPRING"
           "DIST"
           "MOVE"
           "NEATO-NLIST"
           "CLEANUP"
           "GVC"
           "ALG"
           "FLAGS"
           "RANKDIR"
           "CHARSET"
           "HAS-IMAGES"
           "HAS-LABELS"
           "GUI-STATE"
           "BORDER"
           "BB"
           "LABEL"
           "DRAWING"
           "AGRAPHINFO-T"
           "SVGFONTS"
           "PSFONTS"
           "NATIVEFONTS"
           "FONTNAME-KIND"
           "NLIST-T"
           "FLAT"
           "CACHE-NC"
           "VALID"
           "CANDIDATE"
           "PHT-2"
           "PHT-1"
           "HT-2"
           "HT-1"
           "AV"
           "AN"
           "V"
           "RANK-T"
           "NCOLS"
           "NROWS"
           "ADJMATRIX-T"
           "AGRAPH-T"
           "GRAPH-T"
           "AGNODE-T"
           "NODE-T"
           "GVC-T"
           "GVC-S"
           "UR"
           "LL"
           "BOX"
           "HTML"
           "SET"
           "U"
           "D"
           "P"
           "DIMEN"
           "FONTSIZE"
           "FONTCOLOR"
           "FONTNAME"
           "TEXT"
           "TEXTLABEL-T"
           "POINTF"
           "POINTF-S"
           "RATIO-KIND"
           "CENTERED"
           "LANDSCAPE"
           "FILLED"
           "PAGE"
           "MARGIN"
           "DPI"
           "RATIO"
           "SCALE"
           "QUANTUM"
           "LAYOUT-T"
           "R-EXPAND"
           "R-AUTO"
           "R-COMPRESS"
           "R-FILL"
           "R-VALUE"
           "R-NONE"
           "RATIO-T"
           "BOOLEAN"
           "Y"
           "X"
           "POINT"
           "PREV"
           "E"
           "N"
           "AGPROTO-T"
           "MAX-EDGE-ID"
           "MAX-NODE-ID"
           "GLOBATTR"
           "EDGEATTR"
           "NODEATTR"
           "NODE-DICT"
           "AGDATA-T"
           "LIST"
           "DICT"
           "AGDICT-T"
           "FIXED"
           "PRINTED"
           "INDEX"
           "VALUE"
           "NAME"
           "AGSYM-T"
           "DICT-T"
           "WALK"
           "VIEW"
           "NVIEW"
           "METH"
           "DATA"
           "DISC"
           "DT-T"
           "DTMETHOD-T"
           "SEARCHF"
           "DTDATA-T"
           "LOOP"
           "NTAB"
           "HH"
           "HERE"
           "TYPE"
           "DTLINK-T"
           "HL"
           "RIGHT"
           "DTDISC-T"
           "EVENTF"
           "MEMORYF"
           "HASHF"
           "COMPARF"
           "FREEF"
           "MAKEF"
           "LINK"
           "SIZE"
           "KEY"
           "DTEVENT-F"
           "DTMEMORY-F"
           "DTHASH-F"
           "DTCOMPAR-F"
           "DTFREE-F"
           "DTMAKE-F"
           "DTSEARCH-F"))

(cl:in-package :graphviz-cffi-bindings)

(cl:defun vtable-lookup (pobj indx coff)
  (cl:let ((vptr (cffi:mem-ref pobj :pointer coff)))
    (cffi:mem-aref vptr :pointer (cl:- indx 2))))

(cl:defmacro virtual-funcall (pobj indx coff cl:&body body)
  `(cffi:foreign-funcall-pointer (vtable-lookup ,pobj ,indx ,coff) ,cl:nil ,@body))

(cffi::defctype dtsearch-f :pointer)

(cffi::defctype dtmake-f :pointer)

(cffi::defctype dtfree-f :pointer)

(cffi::defctype dtcompar-f :pointer)

(cffi::defctype dthash-f :pointer)

(cffi::defctype dtmemory-f :pointer)

(cffi::defctype dtevent-f :pointer)

(cffi:defcstruct _dtdisc-s
  (key :int)
  (size :int)
  (link :int)
  (makef dtmake-f)
  (freef dtfree-f)
  (comparf dtcompar-f)
  (hashf dthash-f)
  (memoryf dtmemory-f)
  (eventf dtevent-f))

(cffi::defctype dtdisc-t _dtdisc-s)
;;; Skipping anonymous composite type #<UNION <anonymous> {1007ABB6C1}>

(cffi:defcstruct _dtlink-s
  (right :pointer)
  #+nil(hl ;;; Skipping anonymous type #<UNION <anonymous> {1007ABB6C1}>
  ))

(cffi::defctype dtlink-t _dtlink-s)
;;; Skipping anonymous composite type #<UNION <anonymous> {1007AC0C81}>

(cffi:defcstruct _dtdata-s
  (type :int)
  (here :pointer)
  #+nil(hh ;;; Skipping anonymous type #<UNION <anonymous> {1007AC0C81}>
  )
  (ntab :int)
  (size :int)
  (loop :int))

(cffi::defctype dtdata-t _dtdata-s)

(cffi:defcstruct _dtmethod-s
  (searchf dtsearch-f)
  (type :int))

(cffi::defctype dtmethod-t _dtmethod-s)

(cffi:defcstruct _dt-s
  (searchf dtsearch-f)
  (disc :pointer)
  (data :pointer)
  (memoryf dtmemory-f)
  (meth :pointer)
  (type :int)
  (nview :int)
  (view :pointer)
  (walk :pointer))

(cffi::defctype dt-t _dt-s)

(cffi::defctype dict-t _dt-s)

(cffi:defcstruct agsym-t
  (name (:pointer :char))
  (value (:pointer :char))
  (index :int)
  (printed :unsigned-char)
  (fixed :unsigned-char))

(cffi:defcstruct agdict-t
  (name (:pointer :char))
  (dict :pointer)
  (list :pointer))

(cffi:defcstruct agdata-t
  (node-dict :pointer)
  (nodeattr :pointer)
  (edgeattr :pointer)
  (globattr :pointer)
  (max-node-id :int)
  (max-edge-id :int))

(cffi:defcstruct agproto-t
  (n :pointer)
  (e :pointer)
  (prev :pointer))

(cffi:defcstruct point
  (x :int)
  (y :int))

(cffi::defctype boolean :unsigned-char)

(cffi:defcenum ratio-t
  (:r-none 0)
  (:r-value 1)
  (:r-fill 2)
  (:r-compress 3)
  (:r-auto 4)
  (:r-expand 5))

(cffi:defcstruct layout-t
  (quantum :double)
  (scale :double)
  (ratio :double)
  (dpi :double)
  (margin point)
  (page point)
  (size point)
  (filled boolean)
  (landscape boolean)
  (centered boolean)
  (ratio-kind ratio-t))

(cffi:defcstruct pointf-s
  (x :double)
  (y :double))

(cffi::defctype pointf pointf-s)
;;; Skipping anonymous composite type #<UNION <anonymous> {1007ACC661}>

(cffi:defcstruct textlabel-t
  (text (:pointer :char))
  (fontname (:pointer :char))
  (fontcolor (:pointer :char))
  (fontsize :double)
  (dimen pointf)
  (p point)
  (d pointf)
  #+nil(u ;;; Skipping anonymous type #<UNION <anonymous> {1007ACC661}>
  )
  (set boolean)
  (html boolean))

(cffi:defcstruct box
  (ll point)
  (ur point))

(cffi:defcstruct gvc-s
  )

(cffi::defctype gvc-t gvc-s)

(cffi:defcstruct adjmatrix-t
  (nrows :int)
  (ncols :int)
  (data (:pointer :char)))

(cffi:defcstruct rank-t
  (n :int)
  (v :pointer)
  (an :int)
  (av :pointer)
  (ht-1 :int)
  (ht-2 :int)
  (pht-1 :int)
  (pht-2 :int)
  (candidate boolean)
  (valid boolean)
  (cache-nc :int)
  (flat :pointer))

(cffi:defcstruct nlist-t
  (list :pointer)
  (size :int))

(cffi:defcenum fontname-kind
  (:nativefonts 0)
  (:psfonts 1)
  (:svgfonts 2))

(cffi:defcstruct agraphinfo-t
  (drawing :pointer)
  (label :pointer)
  (bb box)
  (border point :count 4)
  (gui-state :unsigned-char)
  (has-labels :unsigned-char)
  (has-images boolean)
  (charset :unsigned-char)
  (rankdir :int)
  (ht-1 :int)
  (ht-2 :int)
  (flags :unsigned-short)
  (alg (:pointer :void))
  (gvc :pointer)
  (cleanup :pointer)
  (neato-nlist :pointer)
  (move :int)
  (dist :pointer)
  (spring :pointer)
  (sum-t :pointer)
  (t :pointer)
  (ndim :int)
  (n-cluster :int)
  (clust :pointer)
  (nlist :pointer)
  (rank :pointer)
  (comp nlist-t)
  (minset :pointer)
  (maxset :pointer)
  (n-nodes :long)
  (minrank :short)
  (maxrank :short)
  (has-flat-edges boolean)
  (showboxes :unsigned-char)
  (cluster-was-collapsed boolean)
  (fontnames fontname-kind)
  (nodesep :int)
  (ranksep :int)
  (ln :pointer)
  (rn :pointer)
  (leader :pointer)
  (rankleader :pointer)
  (expanded boolean)
  (installed :char)
  (set-type :char)
  (label-pos :char)
  (exact-ranksep boolean))

(cffi:defcstruct agraph-t
  ;;; Skipping field #<FIELD tag> in #<STRUCT Agraph_t> because it has a bitfield type which is not yet supported by CFFI! Check the layout manually!

  ;;; Skipping field #<FIELD kind> in #<STRUCT Agraph_t> because it has a bitfield type which is not yet supported by CFFI! Check the layout manually!

  ;;; Skipping field #<FIELD handle> in #<STRUCT Agraph_t> because it has a bitfield type which is not yet supported by CFFI! Check the layout manually!
  
  (padding1 :int) ;; generated to pad 32 bits of skipped bitfield typed fields
  (attr :pointer)
  (didset (:pointer :char))
  (name (:pointer :char))
  (univ :pointer)
  (nodes :pointer)
  (inedges :pointer)
  (outedges :pointer)
  (root :pointer)
  (meta-node :pointer)
  (proto :pointer)
  (u agraphinfo-t))

(cffi::defctype graph-t agraph-t)

(cffi:defcstruct shape-functions
  (initfn :pointer)
  (freefn :pointer)
  (portfn :pointer)
  (insidefn :pointer)
  (pboxfn :pointer)
  (codefn :pointer))

(cffi:defcstruct polygon-t
  (regular :int)
  (peripheries :int)
  (sides :int)
  (orientation :double)
  (distortion :double)
  (skew :double)
  (option :int)
  (vertices :pointer))

(cffi:defcstruct shape-desc
  (name (:pointer :char))
  (fns :pointer)
  (polygon :pointer)
  (usershape boolean))

(cffi:defcstruct boxf
  (ll pointf)
  (ur pointf))

(cffi:defcstruct elist
  (list :pointer)
  (size :int))

(cffi:defcstruct agnodeinfo-t
  (shape :pointer)
  (shape-info (:pointer :void))
  (coord point)
  (width :double)
  (height :double)
  (bb boxf)
  (ht :int)
  (lw :int)
  (rw :int)
  (label :pointer)
  (alg (:pointer :void))
  (state :char)
  (gui-state :unsigned-char)
  (clustnode boolean)
  (pinned :unsigned-char)
  (xsize :short)
  (ysize :short)
  (id :int)
  (heapindex :int)
  (hops :int)
  (pos (:pointer :double))
  (dist :double)
  (showboxes :unsigned-char)
  (has-port boolean)
  (node-type :char)
  (mark :char)
  (onstack :char)
  (ranktype :char)
  (weight-class :char)
  (next :pointer)
  (prev :pointer)
  (in elist)
  (out elist)
  (flat-out elist)
  (flat-in elist)
  (other elist)
  (clust :pointer)
  (uf-size :int)
  (uf-parent :pointer)
  (inleaf :pointer)
  (outleaf :pointer)
  (rank :int)
  (order :int)
  (mval :int)
  (save-in elist)
  (save-out elist)
  (tree-in elist)
  (tree-out elist)
  (par :pointer)
  (low :int)
  (lim :int)
  (priority :int)
  (pad :double :count 1))

(cffi:defcstruct agnode-t
  ;;; Skipping field #<FIELD tag> in #<STRUCT Agnode_t> because it has a bitfield type which is not yet supported by CFFI! Check the layout manually!

  ;;; Skipping field #<FIELD pad> in #<STRUCT Agnode_t> because it has a bitfield type which is not yet supported by CFFI! Check the layout manually!

  ;;; Skipping field #<FIELD handle> in #<STRUCT Agnode_t> because it has a bitfield type which is not yet supported by CFFI! Check the layout manually!
  
  (padding2 :int) ;; generated to pad 32 bits of skipped bitfield typed fields
  (attr :pointer)
  (didset (:pointer :char))
  (name (:pointer :char))
  (id :int)
  (graph :pointer)
  (u agnodeinfo-t))

(cffi::defctype node-t agnode-t)

(cffi:defcstruct bezier
  (list :pointer)
  (size :int)
  (sflag :int)
  (eflag :int)
  (sp point)
  (ep point))

(cffi:defcstruct splines
  (list :pointer)
  (size :int)
  (bb boxf))

(cffi:defcstruct port
  (p point)
  (theta :double)
  (bp :pointer)
  (defined boolean)
  (constrained boolean)
  (clip boolean)
  (order :unsigned-char)
  (side :unsigned-char))

(cffi::defctype ppoint-t pointf-s)

(cffi:defcstruct ppoly-t
  (ps :pointer)
  (pn :int))

(cffi::defctype ppolyline-t ppoly-t)

(cffi:defcstruct agedgeinfo-t
  (spl :pointer)
  (tail-port port)
  (head-port port)
  (label :pointer)
  (head-label :pointer)
  (tail-label :pointer)
  (edge-type :char)
  (adjacent :char)
  (label-ontop :char)
  (gui-state :unsigned-char)
  (to-orig :pointer)
  (alg (:pointer :void))
  (factor :double)
  (dist :double)
  (path ppolyline-t)
  (showboxes :unsigned-char)
  (conc-opp-flag boolean)
  (xpenalty :short)
  (weight :int)
  (cutvalue :int)
  (tree-index :int)
  (count :short)
  (minlen :unsigned-short)
  (to-virt :pointer))

(cffi:defcstruct agedge-t
  ;;; Skipping field #<FIELD tag> in #<STRUCT Agedge_t> because it has a bitfield type which is not yet supported by CFFI! Check the layout manually!

  ;;; Skipping field #<FIELD printkey> in #<STRUCT Agedge_t> because it has a bitfield type which is not yet supported by CFFI! Check the layout manually!

  ;;; Skipping field #<FIELD handle> in #<STRUCT Agedge_t> because it has a bitfield type which is not yet supported by CFFI! Check the layout manually!
  
  (padding3 :int) ;; generated to pad 32 bits of skipped bitfield typed fields
  (attr :pointer)
  (didset (:pointer :char))
  (head :pointer)
  (tail :pointer)
  (id :int)
  (u agedgeinfo-t))

(cffi::defctype edge-t agedge-t)

(cffi:defcfun ("agnxtedge" agnxtedge) :pointer (arg1 :pointer) (arg2 :pointer) (arg3 :pointer))

(cffi:defcfun ("agfstin" agfstin) :pointer (arg1 :pointer) (arg2 :pointer))

(cffi:defcfun ("gvcUsername" gvc-username) (:pointer :char) (arg1 :pointer))

(cffi:defcfun ("agmemread" agmemread) :pointer (arg1 (:pointer :char)))

(cffi:defcfun ("agindex" agindex) :int (arg1 (:pointer :void)) (arg2 (:pointer :char)))

(cffi:defcfun ("gvToggle" gv-toggle) :void (arg1 :int))

(cffi:defcfun ("gvParseArgs" gv-parse-args) :int (gvc :pointer) (argc :int) (argv :pointer))

(cffi:defcfun ("agreadline" agreadline) :void (arg1 :int))

(cffi:defcfun ("gvRenderJobs" gv-render-jobs) :int (gvc :pointer) (g :pointer))

(cffi:defcstruct pathend-t
  (nb box)
  (np point)
  (sidemask :int)
  (boxn :int)
  (boxes box :count 20))

(cffi:defcfun ("agopen" agopen) :pointer (arg1 (:pointer :char)) (arg2 :int))

(cffi:defcfun ("agfstedge" agfstedge) :pointer (arg1 :pointer) (arg2 :pointer))

(cffi:defcstruct _io-marker
  (_next :pointer)
  (_sbuf :pointer)
  (_pos :int))

(cffi::defctype _-off-t :long)

(cffi::defctype _io-lock-t :void)

(cffi::defctype _-off-64-t :long)

(cffi::defctype size-t :unsigned-long)

(cffi:defcstruct _io-file
  (_flags :int)
  (_io-read-ptr (:pointer :char))
  (_io-read-end (:pointer :char))
  (_io-read-base (:pointer :char))
  (_io-write-base (:pointer :char))
  (_io-write-ptr (:pointer :char))
  (_io-write-end (:pointer :char))
  (_io-buf-base (:pointer :char))
  (_io-buf-end (:pointer :char))
  (_io-save-base (:pointer :char))
  (_io-backup-base (:pointer :char))
  (_io-save-end (:pointer :char))
  (_markers :pointer)
  (_chain :pointer)
  (_fileno :int)
  (_flags-2 :int)
  (_old-offset _-off-t)
  (_cur-column :unsigned-short)
  (_vtable-offset :char)
  (_shortbuf :char :count 1)
  (_lock :pointer)
  (_offset _-off-64-t)
  (_-pad-1 (:pointer :void))
  (_-pad-2 (:pointer :void))
  (_-pad-3 (:pointer :void))
  (_-pad-4 (:pointer :void))
  (_-pad-5 size-t)
  (_mode :int)
  (_unused-2 :char :count 20))

(cffi::defctype file _io-file)

(cffi:defcfun ("agread" agread) :pointer (arg1 :pointer))

(cffi:defcfun ("gvNEWcontext" gv-ne-wcontext) :pointer (info :pointer) (user (:pointer :char)))

(cffi:defcenum agerrlevel-t
  (:agwarn 0)
  (:agerr 1)
  (:agmax 2)
  (:agprev 3))

(cffi:defcstruct fdp-parms-t
  (use-grid :int)
  (use-new :int)
  (num-iters :int)
  (unscaled :int)
  (c :double)
  (tfact :double)
  (k :double)
  (t-0 :double))

(cffi:defcfun ("agerrorf" agerrorf) :void (fmt (:pointer :char))common-lisp:&rest)

(cffi:defcfun ("gvRenderData" gv-render-data) :int (gvc :pointer) (g :pointer)
                                                   (format (:pointer :char)) (result :pointer)
                                                   (length (:pointer :unsigned-int)))

(cffi:defcfun ("agnxtnode" agnxtnode) :pointer (arg1 :pointer) (arg2 :pointer))

(cffi:defcfun ("agwarningf" agwarningf) :void (fmt (:pointer :char))common-lisp:&rest)

(cffi:defcfun ("agxset" agxset) :int (arg1 (:pointer :void)) (arg2 :int) (arg3 (:pointer :char)))

(cffi:defcfun ("agclose" agclose) :void (arg1 :pointer))

(cffi:defcenum shape-kind
  (:sh-unset 0)
  (:sh-poly 1)
  (:sh-record 2)
  (:sh-point 3)
  (:sh-epsf 4))

(cffi:defcstruct path
  (start port)
  (end port)
  (ulpp :pointer)
  (urpp :pointer)
  (llpp :pointer)
  (lrpp :pointer)
  (nbox :int)
  (boxes :pointer)
  (data (:pointer :void)))

(cffi:defcfun ("agfindsubg" agfindsubg) :pointer (arg1 :pointer) (arg2 (:pointer :char)))

(cffi:defcfun ("aginsert" aginsert) :void (arg1 :pointer) (arg2 (:pointer :void)))

(cffi:defcfun ("agedge" agedge) :pointer (arg1 :pointer) (arg2 :pointer) (arg3 :pointer))

(cffi:defcfun ("agcopyattr" agcopyattr) :int (arg1 (:pointer :void)) (arg2 (:pointer :void)))

(cffi:defcstruct bezierf
  (list :pointer)
  (size :int)
  (sflag :int)
  (eflag :int)
  (sp pointf)
  (ep pointf))

(cffi:defcstruct splinesf
  (list :pointer)
  (size :int))

(cffi:defcstruct field-t
  (size point)
  (b box)
  (n-flds :int)
  (lp :pointer)
  (fld :pointer)
  (id (:pointer :char))
  (lr :unsigned-char)
  (sides :unsigned-char))

(cffi:defcfun ("agerr" agerr) :int (level agerrlevel-t) (fmt (:pointer :char))common-lisp:&rest)

(cffi:defcfun ("agnedges" agnedges) :int (arg1 :pointer))

(cffi:defcfun ("gvFreeLayout" gv-free-layout) :int (gvc :pointer) (g :pointer))

(cffi:defcfun ("agfstout" agfstout) :pointer (arg1 :pointer) (arg2 :pointer))

(cffi:defcstruct gvlayout-features-t
  (flags :int))

(cffi:defcfun ("agsafeset" agsafeset) :int (arg1 (:pointer :void)) (arg2 (:pointer :char))
                                           (arg3 (:pointer :char)) (arg4 (:pointer :char)))

(cffi:defcfun ("agusergraph" agusergraph) :pointer (arg1 :pointer))

(cffi:defcfun ("agsetfile" agsetfile) :void (arg1 (:pointer :char)))

(cffi:defcfun ("agnnodes" agnnodes) :int (arg1 :pointer))

(cffi:defcfun ("aginitlib" aginitlib) :void (arg1 :int) (arg2 :int) (arg3 :int))

(cffi:defcstruct htmllabel-t
  )

(cffi:defcstruct spline-info
  (swap-ends :pointer)
  (spline-merge :pointer))

(cffi:defcfun ("agraphattr" agraphattr) :pointer (arg1 :pointer) (arg2 (:pointer :char))
                                                 (arg3 (:pointer :char)))

(cffi:defcenum agobjkind-t
  (:agnode 1)
  (:agedge 2)
  (:aggraph 3))

(cffi:defcfun ("gvLayout" gv-layout) :int (gvc :pointer) (g :pointer) (engine (:pointer :char)))

(cffi:defcfun ("agstrdup_html" agstrdup-html) (:pointer :char) (s (:pointer :char)))

(cffi::defctype gets-f :pointer)

(cffi:defcfun ("gvcInfo" gvc-info) :pointer (arg1 :pointer))

(cffi:defcfun ("attach_attrs" attach-attrs) :void (g :pointer))

(cffi:defcfun ("agcontains" agcontains) :int (arg1 :pointer) (arg2 (:pointer :void)))

(cffi:defcfun ("gvRender" gv-render) :int (gvc :pointer) (g :pointer) (format (:pointer :char))
                                          (out :pointer))

(cffi:defcfun ("agprvnode" agprvnode) :pointer (arg1 :pointer) (arg2 :pointer))

(cffi:defcfun ("agnodeattr" agnodeattr) :pointer (arg1 :pointer) (arg2 (:pointer :char))
                                                 (arg3 (:pointer :char)))

(cffi:defcfun ("gvUsername" gv-username) (:pointer :char))

(cffi:defcstruct stroke-t
  (nvertices :int)
  (flags :int)
  (vertices :pointer))

(cffi:defcstruct shape-t
  (nstrokes :int)
  (strokes :pointer))

(cffi:defcfun ("aglasterr" aglasterr) (:pointer :char))

(cffi:defcfun ("agdelete" agdelete) :void (arg1 :pointer) (arg2 (:pointer :void)))

(cffi:defcfun ("agstrfree" agstrfree) :void (arg1 (:pointer :char)))

(cffi:defcfun ("agerrors" agerrors) :int)

(cffi:defcfun ("gvFreeContext" gv-free-context) :int (gvc :pointer))

(cffi:defcfun ("agedgeattr" agedgeattr) :pointer (arg1 :pointer) (arg2 (:pointer :char))
                                                 (arg3 (:pointer :char)))

(cffi:defcfun ("agfindedge" agfindedge) :pointer (arg1 :pointer) (arg2 :pointer) (arg3 :pointer))

(cffi::defctype bsearch-cmpf :pointer)

(cffi:defcfun ("agfindattr" agfindattr) :pointer (arg1 (:pointer :void)) (arg2 (:pointer :char)))

(cffi::defctype attrsym-t agsym-t)

(cffi:defcfun ("agstrcanon" agstrcanon) (:pointer :char) (arg1 (:pointer :char))
                                                         (arg2 (:pointer :char)))

(cffi:defcvar ("agerrno" agerrno) agerrlevel-t)

(cffi:defcfun ("agnxtin" agnxtin) :pointer (arg1 :pointer) (arg2 :pointer))

(cffi:defcfun ("gvcBuildDate" gvc-build-date) (:pointer :char) (arg1 :pointer))

(cffi:defcfun ("gvcVersion" gvc-version) (:pointer :char) (arg1 :pointer))

(cffi:defcfun ("agcanonical" agcanonical) (:pointer :char) (arg1 (:pointer :char)))

(cffi:defcstruct nodequeue
  (store :pointer)
  (limit :pointer)
  (head :pointer)
  (tail :pointer))

(cffi:defcfun ("agnxtout" agnxtout) :pointer (arg1 :pointer) (arg2 :pointer))
;;; Skipping anonymous composite type #<STRUCT <anonymous> {1007ACC241}>
;;; Skipping anonymous composite type #<STRUCT <anonymous> {1007ACC261}>

(cffi:defcunion inside-t
  #+nil(a ;;; Skipping anonymous type #<STRUCT <anonymous> {1007ACC241}>
  )
  #+nil(s ;;; Skipping anonymous type #<STRUCT <anonymous> {1007ACC261}>
  ))

(cffi:defcfun ("gvLayoutJobs" gv-layout-jobs) :int (gvc :pointer) (g :pointer))

(cffi:defcfun ("aglstnode" aglstnode) :pointer (arg1 :pointer))

(cffi:defcfun ("agset" agset) :int (arg1 (:pointer :void)) (arg2 (:pointer :char))
                                   (arg3 (:pointer :char)))

(cffi:defcfun ("agwrite" agwrite) :int (arg1 :pointer) (arg2 :pointer))

(cffi:defcfun ("agget" agget) (:pointer :char) (arg1 (:pointer :void)) (arg2 (:pointer :char)))

(cffi:defcfun ("agstrdup" agstrdup) (:pointer :char) (arg1 (:pointer :char)))

(cffi:defcfun ("agnode" agnode) :pointer (arg1 :pointer) (arg2 (:pointer :char)))

(cffi:defcfun ("gvRenderFilename" gv-render-filename) :int (gvc :pointer) (g :pointer)
                                                           (format (:pointer :char))
                                                           (filename (:pointer :char)))

(cffi:defcfun ("agprotograph" agprotograph) :pointer)

(cffi:defcfun ("agfstnode" agfstnode) :pointer (arg1 :pointer))

(cffi::defctype qsort-cmpf :pointer)

(cffi:defcfun ("agfindnode" agfindnode) :pointer (arg1 :pointer) (arg2 (:pointer :char)))

(cffi:defcfun ("aghtmlstr" aghtmlstr) :int (s (:pointer :char)))

(cffi:defcfun ("agread_usergets" agread-usergets) :pointer (arg1 :pointer) (arg2 gets-f))

(cffi:defcfun ("agseterr" agseterr) :void (arg1 agerrlevel-t))

(cffi:defcfun ("agxget" agxget) (:pointer :char) (arg1 (:pointer :void)) (arg2 :int))

(cffi:defcfun ("gvNextInputGraph" gv-next-input-graph) :pointer (gvc :pointer))

(cffi:defcfun ("agsubg" agsubg) :pointer (arg1 :pointer) (arg2 (:pointer :char)))

(cffi:defcfun ("gvContext" gv-context) :pointer)

(cffi:defcstruct textpara-t
  (str (:pointer :char))
  (fontname (:pointer :char))
  (postscript-alias :pointer)
  (layout (:pointer :void))
  (free-layout :pointer)
  (fontsize :double)
  (width :double)
  (height :double)
  (yoffset-layout :double)
  (yoffset-centerline :double)
  (just :char))


